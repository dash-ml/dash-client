schema {
  query: Query
  mutation: Mutation
}

type Faction implements Node {
  id: ID!
  name: String
  ships(before: String, after: String, first: Int, last: Int): ShipConnection
}

input IntroduceShipInput {
  shipName: String!
  factionId: String!
  clientMutationId: String
}

type IntroduceShipPayload {
  ship: Ship
  faction: Faction
  clientMutationId: String
}

type Mutation {
  introduceShip(input: IntroduceShipInput!): IntroduceShipPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project implements Node {
  id: ID!
  name: String
  description: String
  projects: [Project]
}

type Query {
  user: User
  users: [User]
  team: Team
  teams: [Team]
  project: Project
  projects: [Project]
  rebels: Faction
  empire: Faction
  node(id: ID!): Node
}

type Ship implements Node {
  id: ID!
  name: String
}

type ShipConnection {
  pageInfo: PageInfo!
  edges: [ShipEdge]!
}

type ShipEdge {
  node: Ship
  cursor: String!
}

type Team implements Node {
  id: ID!
  name: String
  description: String
  users: [User]
  projects: [Project]
}

type User implements Node {
  id: ID!
  username: String
  name: String
  projects: [Project]
  teams: [Team]
}
