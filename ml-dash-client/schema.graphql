schema {
  query: Query
  mutation: Mutation
}

type Directory implements Node {
  id: ID!
  name: String
  path: String
  readme: File
  dashConfigs(before: String, after: String, first: Int, last: Int): FileConnection
  experiments(before: String, after: String, first: Int, last: Int): ExperimentConnection
  directories(before: String, after: String, first: Int, last: Int): DirectoryConnection
  files(before: String, after: String, first: Int, last: Int): FileConnection
}

type DirectoryConnection {
  pageInfo: PageInfo!
  edges: [DirectoryEdge]!
}

type DirectoryEdge {
  node: Directory
  cursor: String!
}

type Experiment implements Node {
  id: ID!
  name: String
  path: String
  parameters: Parameters
  metrics: Metrics
  directories(before: String, after: String, first: Int, last: Int): DirectoryConnection
  files(before: String, after: String, first: Int, last: Int): FileConnection
}

type ExperimentConnection {
  pageInfo: PageInfo!
  edges: [ExperimentEdge]!
}

type ExperimentEdge {
  node: Experiment
  cursor: String!
}

type File implements Node {
  id: ID!
  name: String
  stem: String
  path: String
  relPath: String
  text(start: Int = 0, stop: Int): String
  json: GenericScalar
  yaml: GenericScalar
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
}

type FileEdge {
  node: File
  cursor: String!
}

scalar GenericScalar

type Metrics implements Node {
  id: ID!
  path: String
  keys: [String]
  value(keys: [String], k: Int, last: Int, window: Int): GenericScalar
}

input MutateJSONFileInput {
  clientMutationId: String
}

type MutateJSONFilePayload {
  file: File
  clientMutationId: String
}

input MutateTextFileInput {
  id: ID
  text: String!
  clientMutationId: String
}

type MutateTextFilePayload {
  file: File
  clientMutationId: String
}

input MutateYamlFileInput {
  clientMutationId: String
}

type MutateYamlFilePayload {
  file: File
  clientMutationId: String
}

type Mutation {
  updateText(input: MutateTextFileInput!): MutateTextFilePayload
  updateJson(input: MutateJSONFileInput!): MutateJSONFilePayload
  updateYaml(input: MutateYamlFileInput!): MutateYamlFilePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parameters implements Node {
  id: ID!
  Path: String
  keys: [String]
  value: GenericScalar
  raw: GenericScalar
  flat: GenericScalar
}

type Project implements Node {
  id: ID!
  name: String
  experiments(before: String, after: String, first: Int, last: Int): ExperimentConnection
  directories(before: String, after: String, first: Int, last: Int): DirectoryConnection
  files(before: String, after: String, first: Int, last: Int): FileConnection
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
}

type ProjectEdge {
  node: Project
  cursor: String!
}

type Query {
  node(id: ID!): Node
  users: [User]
  user(username: String): User
  series(metricsFiles: [String], prefix: String, head: Int, tail: Int, xLow: Float, xHigh: Float, k: Int, xAlign: GenericScalar, xKey: String, yKey: String, yKeys: [String], label: String): Series
  project(id: ID!): Project
  metrics(id: ID!): Metrics
  directory(id: ID!): Directory
}

type Series implements Node {
  id: ID!
  path: String
  prefix: String
  metricsFiles: [ID]
  Df: GenericScalar
  window: Float
  label: String
  xKey: String
  yKey: String
  yKeys: [String]
  xData: GenericScalar
  yMean: GenericScalar
  yMedian: GenericScalar
  yMin: GenericScalar
  yMax: GenericScalar
  y25: GenericScalar
  y75: GenericScalar
  y95: GenericScalar
  y05: GenericScalar
  yCount: GenericScalar
}

type User implements Node {
  id: ID!
  username: String
  name: String
  projects(before: String, after: String, first: Int, last: Int): ProjectConnection
}
